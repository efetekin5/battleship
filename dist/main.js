(()=>{"use strict";const e=(e,t)=>{const o=document.createElement("div");o.classList.add("cell"),"p"===t?(o.id=`${t}${e}`,document.querySelector(".playerBoard").appendChild(o)):"ai"===t&&(o.id=`${t}${e}`,document.querySelector(".aiBoard").appendChild(o))},t=(e,t,o)=>{if(o)for(let o=0;o<100;o+=1)!1!==e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(133, 255, 179)":!1===e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(255, 133, 133)":document.getElementById(`${t}${o}`).style.backgroundColor="white";else for(let o=0;o<100;o+=1)!1!==e[o].storedShip&&!1===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(68, 68, 68)":!1!==e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(133, 255, 179)":!1===e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(255, 133, 133)":document.getElementById(`${t}${o}`).style.backgroundColor="white"},o=(e,t)=>({length:e,hitCount:0,sunk:!1,isVertical:t}),r=(e,t)=>{const r=[...e];if(1===Math.floor(2*Math.random())+1){let e,l;do{e=Math.floor(Math.random()*(10-t+1)),l=10*Math.floor(10*Math.random())}while(r.slice(l+e,l+e+t).some((e=>e.storedShip)));const n=o(t,!1);for(let o=0;o<t;o+=1)r[l+e+o].storedShip=n}else{let e,l,n;do{e=Math.floor(10*Math.random()),l=10*Math.floor(Math.random()*(10-t+1));const o=[];for(let n=l+e;n<e+l+10*t;n+=10)o.push(r[n]);n=o.some((e=>e.storedShip))}while(n);const d=o(t,!0);for(let o=0;o<10*t;o+=10)r[l+e+o].storedShip=d}return r},l=()=>{let o=[];return{board:o,createBoard:t=>{for(let r=0;r<100;r+=1)o[r]={storedShip:!1,beenHit:!1},e(r,t)},placeShip:(e,t)=>{if(e.isVertical)for(let r=t;r<t+10*e.length;r+=10)o[r].storedShip=e;else for(let r=t;r<t+e.length;r+=1)o[r].storedShip=e},receiveAttack:(e,r,l)=>{if(!1!==o[e].storedShip){o[e].beenHit=!0;let n=o[e].storedShip.hitCount;n+=1,o[e].storedShip.hitCount=n,o[e].storedShip.hitCount===o[e].storedShip.length&&(o[e].storedShip.sunk=!0),t(o,r,l)}else o[e].beenHit=!0,t(o,r,l)},allShipsSunk:()=>{for(let e=0;e<100;e+=1)if(!1!==o[e].storedShip&&!1===o[e].beenHit)return!1;return!0},randomShips:(e,l)=>{let n=[...o];for(let e=0;e<100;e+=1)n[e].storedShip=!1;n=r(o,5),n=r(o,4),n=r(o,3),n=r(o,3),n=r(o,2),t(n,e,l),o=n},resetBoard:()=>{for(let e=0;e<100;e+=1)o[e].storedShip=!1,o[e].beenHit=!1}}},n=(e,t)=>({name:e,oppBoard:t,attack:(e,o,r)=>{t.receiveAttack(e,o,r)},aiAttack:()=>{let e;do{e=Math.floor(99*Math.random())}while(t.board[e].beenHit);t.receiveAttack(e,"p",!1)}}),d=(e,o,r)=>{document.querySelector(".winnerText").textContent=r?"You Won Do You Want To Play Again?":"Ai Won Do You Want To Play Again";const l=document.querySelector(".winBackground");l.style.display="flex",document.querySelector(".restartButton").addEventListener("click",(()=>{e.resetBoard(),t(e.board,"p",!1),o.resetBoard(),t(o.board,"ai",!0),document.querySelector(".buttons").style.display="flex",document.querySelector(".startButton").style.display="flex";const r=document.querySelector(".manual");r.style.display="flex",r.style.removeProperty("margin-left");const n=document.querySelector(".random");n.style.display="flex",n.style.removeProperty("margin-left");const d=document.querySelector(".axisButton");null!==d&&d.remove(),l.style.display="none"}))},i=(e,t,o,r)=>{const l=document.querySelector(".axisButton"),n=Number(e.target.id.slice(1)),d=n%10,i=Math.floor(n/10);if("none"!==document.querySelector(".startButton").style.display)if(o){if("Horizontal"===l.textContent){const e=d-t;if(e>0)for(let o=0;o<t-e;o+=1){const e=document.querySelector(`#p${n+o}`);!1===r[n+o].storedShip&&(e.style.backgroundColor="white")}else for(let e=0;e<t;e+=1){const t=document.querySelector(`#p${n+e}`);!1===r[n+e].storedShip&&(t.style.backgroundColor="white")}}else if("Vertical"===l.textContent){const e=i-t;if(e>0)for(let o=0;o<10*t-10*e;o+=10){const e=document.querySelector(`#p${n+o}`);!1===r[n+o].storedShip&&(e.style.backgroundColor="white")}else for(let e=0;e<10*t;e+=10){const t=document.querySelector(`#p${n+e}`);!1===r[n+e].storedShip&&(t.style.backgroundColor="white")}}}else if("Horizontal"===l.textContent){const e=9-d+1;if(d>9-t+1)for(let t=0;t<e;t+=1){const e=document.querySelector(`#p${n+t}`);!1===r[n+t].storedShip&&(e.style.background="rgb(185, 74, 74)")}else for(let e=0;e<t;e+=1){const t=document.querySelector(`#p${n+e}`);!1===r[n+e].storedShip&&(t.style.background="lime")}}else if("Vertical"===l.textContent){const e=9-i+1;if(i>9-t+1)for(let t=0;t<10*e;t+=10){const e=document.querySelector(`#p${n+t}`);!1===r[n+t].storedShip&&(e.style.background="rgb(185, 74, 74)")}else for(let e=0;e<10*t;e+=10){const t=document.querySelector(`#p${n+e}`);!1===r[n+e].storedShip&&(t.style.background="lime")}}},c=l();c.createBoard("p");const a=l();a.createBoard("ai");const s=n("player",a),u=n("ai",c),p=document.querySelector(".random"),y=document.querySelector(".manual");p.addEventListener("click",(()=>{y.style.display="none",p.style.marginLeft="115px",c.randomShips("p",!1)}));const h=e=>{const t=Number(e.target.id.slice(2));!1===a.board[t].beenHit&&(s.attack(t,"ai",!0),a.allShipsSunk()&&(d(c,a,!0),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.removeEventListener("click",h)}))),u.aiAttack(),c.allShipsSunk()&&(d(c,a,!1),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.removeEventListener("click",h)}))))},m=document.querySelector(".startButton");m.addEventListener("click",(()=>{let e=0;for(let t=0;t<100;t+=1)!1!==c.board[t].storedShip&&(e+=1);17===e&&(document.querySelector(".buttons").style.display="none",m.style.display="none",a.randomShips("ai",!0),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.addEventListener("click",h)})))})),y.addEventListener("click",(()=>{if(p.style.display="none",null===document.querySelector(".axisButton")){(e=>{const t=document.createElement("button");t.classList.add("axisButton"),t.textContent="Horizontal",t.addEventListener("click",(()=>{let o=0;for(let t=0;t<100;t+=1)!1!==e[t].storedShip&&(o+=1);17!==o&&("Vertical"===t.textContent?t.textContent="Horizontal":t.textContent="Vertical")})),document.querySelector(".buttons").appendChild(t)})(c.board);const e=document.querySelectorAll('div.cell[id^="p"]');e.forEach((e=>{e.addEventListener("mouseenter",(e=>{let t=0;for(let e=0;e<100;e+=1)!1!==c.board[e].storedShip&&(t+=1);0===t?i(e,5,!1,c.board):5===t?i(e,4,!1,c.board):9===t||12===t?i(e,3,!1,c.board):15===t&&i(e,2,!1,c.board)}))})),e.forEach((e=>{e.addEventListener("mouseleave",(e=>{i(e,5,!0,c.board)}))})),e.forEach((e=>{e.addEventListener("click",(e=>{let r,l;l="Vertical"===document.querySelector(".axisButton").textContent;let n=0;for(let e=0;e<100;e+=1)!1!==c.board[e].storedShip&&(n+=1);0===n?r=o(5,l):5===n?r=o(4,l):9===n||12===n?r=o(3,l):15===n&&(r=o(2,l));const d=Number(e.target.id.slice(1));if(r.isVertical){for(let e=0;e<10*r.length;e+=10)if(!1!==c.board[d+e].storedShip)return}else for(let e=0;e<r.length;e+=1)if(!1!==c.board[d+e].storedShip)return;"rgb(185, 74, 74)"!==document.querySelector(`#p${d}`).style.background&&(c.placeShip(r,d),t(c.board,"p",!1))}))}))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,