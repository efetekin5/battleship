(()=>{"use strict";const e=(e,t)=>{const o=document.createElement("div");o.classList.add("cell"),"p"===t?(o.id=`${t}${e}`,document.querySelector(".playerBoard").appendChild(o)):"ai"===t&&(o.id=`${t}${e}`,document.querySelector(".aiBoard").appendChild(o))},t=(e,t,o)=>{if(o)for(let o=0;o<100;o+=1)!1!==e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(133, 255, 179)":!1===e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(255, 133, 133)":document.getElementById(`${t}${o}`).style.backgroundColor="white";else for(let o=0;o<100;o+=1)!1!==e[o].storedShip&&!1===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(68, 68, 68)":!1!==e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(133, 255, 179)":!1===e[o].storedShip&&!0===e[o].beenHit?document.getElementById(`${t}${o}`).style.backgroundColor="rgb(255, 133, 133)":document.getElementById(`${t}${o}`).style.backgroundColor="white"},o=(e,t)=>({length:e,hitCount:0,sunk:!1,hit:(e,t)=>{const o=t[e].storedShip;return o.hitCount<o.length&&(o.hitCount+=1,o.hitCount===o.length&&(o.sunk=!0)),0},isVertical:t}),r=(e,t)=>{const r=[...e];if(1===Math.floor(2*Math.random())+1){let e,n;do{e=Math.floor(Math.random()*(10-t+1)),n=10*Math.floor(10*Math.random())}while(r.slice(n+e,n+e+t).some((e=>e.storedShip)));const l=o(t,!1);for(let o=0;o<t;o+=1)r[n+e+o].storedShip=l}else{let e,n,l;do{e=Math.floor(10*Math.random()),n=10*Math.floor(Math.random()*(10-t+1));const o=[];for(let l=n+e;l<e+n+10*t;l+=10)o.push(r[l]);l=o.some((e=>e.storedShip))}while(l);const d=o(t,!0);for(let o=0;o<10*t;o+=10)r[n+e+o].storedShip=d}return r},n=()=>{let o=[];return{board:o,createBoard:t=>{for(let r=0;r<100;r+=1)o[r]={storedShip:!1,beenHit:!1},e(r,t)},placeShip:(e,t)=>{if(e.isVertical)for(let r=t;r<t+10*e.length;r+=10)o[r].storedShip=e;else for(let r=t;r<t+e.length;r+=1)o[r].storedShip=e},receiveAttack:(e,r,n)=>{!1!==o[e].storedShip?(o[e].beenHit=!0,o[e].storedShip.hit(e,o),t(o,r,n)):(o[e].beenHit=!0,t(o,r,n))},allShipsSunk:()=>{for(let e=0;e<100;e+=1)if(!1!==o[e].storedShip&&!1===o[e].beenHit)return!1;return!0},randomShips:(e,n)=>{let l=[...o];for(let e=0;e<100;e+=1)l[e].storedShip=!1;l=r(o,5),l=r(o,4),l=r(o,3),l=r(o,3),l=r(o,2),t(l,e,n),o=l},resetBoard:()=>{for(let e=0;e<100;e+=1)o[e].storedShip=!1,o[e].beenHit=!1}}},l=(e,t)=>({name:e,oppBoard:t,attack:(e,o,r)=>{t.receiveAttack(e,o,r)},aiAttack:()=>{let e;do{e=Math.floor(99*Math.random())}while(t.board[e].beenHit);t.receiveAttack(e,"p",!1)}}),d=(e,o,r)=>{document.querySelector(".winnerText").textContent=r?"You Won Do You Want To Play Again?":"Ai Won Do You Want To Play Again";const n=document.querySelector(".winBackground");n.style.display="flex",document.querySelector(".restartButton").addEventListener("click",(()=>{e.resetBoard(),t(e.board,"p",!1),o.resetBoard(),t(o.board,"ai",!0),document.querySelector(".buttons").style.display="flex",document.querySelector(".startButton").style.display="flex";const r=document.querySelector(".manual");r.style.display="flex",r.style.removeProperty("margin-left");const l=document.querySelector(".random");l.style.display="flex",l.style.removeProperty("margin-left"),document.querySelector(".axisButton").remove(),n.style.display="none"}))},c=(e,t,o,r)=>{const n=document.querySelector(".axisButton"),l=Number(e.target.id.slice(1)),d=l%10,c=Math.floor(l/10);if(o){if("Horizontal"===n.textContent){const e=d-t;if(e>0)for(let o=0;o<t-e;o+=1){const e=document.querySelector(`#p${l+o}`);!1===r[l+o].storedShip&&(e.style.backgroundColor="white")}else for(let e=0;e<t;e+=1){const t=document.querySelector(`#p${l+e}`);!1===r[l+e].storedShip&&(t.style.backgroundColor="white")}}else if("Vertical"===n.textContent){const e=c-t;if(e>0)for(let o=0;o<10*t-10*e;o+=10){const e=document.querySelector(`#p${l+o}`);!1===r[l+o].storedShip&&(e.style.backgroundColor="white")}else for(let e=0;e<10*t;e+=10){const t=document.querySelector(`#p${l+e}`);!1===r[l+e].storedShip&&(t.style.backgroundColor="white")}}}else if("Horizontal"===n.textContent){const e=9-d+1;if(d>9-t+1)for(let t=0;t<e;t+=1)document.querySelector(`#p${l+t}`).style.background="rgb(185, 74, 74)";else for(let e=0;e<t;e+=1){const t=document.querySelector(`#p${l+e}`);!1===r[l+e].storedShip&&(t.style.background="lime")}}else if("Vertical"===n.textContent){const e=9-c+1;if(c>9-t+1)for(let t=0;t<10*e;t+=10)document.querySelector(`#p${l+t}`).style.background="rgb(185, 74, 74)";else for(let e=0;e<10*t;e+=10){const t=document.querySelector(`#p${l+e}`);!1===r[l+e].storedShip&&(t.style.background="lime")}}},i=n();i.createBoard("p");const a=n();a.createBoard("ai");const s=l("player",a),u=l("ai",i),y=document.querySelector(".random"),m=document.querySelector(".manual");y.addEventListener("click",(()=>{m.style.display="none",y.style.marginLeft="115px",i.randomShips("p",!1)}));const h=e=>{const t=Number(e.target.id.slice(2));s.attack(t,"ai",!0),a.allShipsSunk()&&(d(i,a,!0),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.removeEventListener("click",h)}))),u.aiAttack(),i.allShipsSunk()&&(d(i,a,!1),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.removeEventListener("click",h)})))},p=document.querySelector(".startButton");p.addEventListener("click",(()=>{let e=0;for(let t=0;t<100;t+=1)!1!==i.board[t].storedShip&&(e+=1);17===e&&(document.querySelector(".buttons").style.display="none",p.style.display="none",a.randomShips("ai",!0),document.querySelectorAll('div.cell[id^="ai"]').forEach((e=>{e.addEventListener("click",h)})))})),m.addEventListener("click",(()=>{if(y.style.display="none",null===document.querySelector(".axisButton")){(()=>{const e=document.createElement("button");e.classList.add("axisButton"),e.textContent="Horizontal",e.addEventListener("click",(()=>{"Vertical"===e.textContent?e.textContent="Horizontal":e.textContent="Vertical"})),document.querySelector(".buttons").appendChild(e)})();const e=document.querySelectorAll('div.cell[id^="p"]');e.forEach((e=>{e.addEventListener("mouseenter",(e=>{let t=0;for(let e=0;e<100;e+=1)!1!==i.board[e].storedShip&&(t+=1);0===t?c(e,5,!1,i.board):5===t?c(e,4,!1,i.board):9===t||12===t?c(e,3,!1,i.board):15===t&&c(e,2,!1,i.board)}))})),e.forEach((e=>{e.addEventListener("mouseleave",(e=>{c(e,5,!0,i.board)}))})),e.forEach((e=>{e.addEventListener("click",(e=>{let r,n;n="Vertical"===document.querySelector(".axisButton").textContent;let l=0;for(let e=0;e<100;e+=1)!1!==i.board[e].storedShip&&(l+=1);0===l?r=o(5,n):5===l?r=o(4,n):9===l||12===l?r=o(3,n):15===l&&(r=o(2,n));const d=Number(e.target.id.slice(1));"rgb(185, 74, 74)"!==document.querySelector(`#p${d}`).style.background&&(i.placeShip(r,d),t(i.board,"p",!1))}))}))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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IndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2Rpc3BsYXlCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3VwZGF0ZUJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY3JlYXRlU2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NyZWF0ZVJhbmRvbVNoaXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZUJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY3JlYXRlUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZW5kR2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2Rpc3BsYXlNYW51YWxTaGlwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYWRkQXhpc0J1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkaXNwbGF5Qm9hcmQgPSAoaWQsIHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcblxuICAgIGlmKHBsYXllciA9PT0gJ3AnKSB7XG4gICAgICAgIGNlbGwuaWQgPSBgJHtwbGF5ZXJ9JHtpZH1gO1xuXG4gICAgICAgIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllckJvYXJkJyk7XG4gICAgICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgIH0gZWxzZSBpZihwbGF5ZXIgPT09ICdhaScpIHtcbiAgICAgICAgY2VsbC5pZCA9IGAke3BsYXllcn0ke2lkfWA7XG5cbiAgICAgICAgY29uc3QgYWlCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5haUJvYXJkJyk7XG4gICAgICAgIGFpQm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5Qm9hcmQ7IiwiY29uc3QgdXBkYXRlQm9hcmQgPSAoYm9hcmQsIGJvYXJkSWQsIGlzQWlCb2FyZCkgPT4ge1xuICBpZiAoaXNBaUJvYXJkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgaWYgKGJvYXJkW2ldLnN0b3JlZFNoaXAgIT09IGZhbHNlICYmIGJvYXJkW2ldLmJlZW5IaXQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2JvYXJkSWR9JHtpfWApO1xuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDEzMywgMjU1LCAxNzkpXCI7XG4gICAgICB9IGVsc2UgaWYgKGJvYXJkW2ldLnN0b3JlZFNoaXAgPT09IGZhbHNlICYmIGJvYXJkW2ldLmJlZW5IaXQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2JvYXJkSWR9JHtpfWApO1xuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDI1NSwgMTMzLCAxMzMpXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Ym9hcmRJZH0ke2l9YCk7XG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICBpZiAoYm9hcmRbaV0uc3RvcmVkU2hpcCAhPT0gZmFsc2UgJiYgYm9hcmRbaV0uYmVlbkhpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2JvYXJkSWR9JHtpfWApO1xuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDY4LCA2OCwgNjgpXCI7XG4gICAgICB9IGVsc2UgaWYgKGJvYXJkW2ldLnN0b3JlZFNoaXAgIT09IGZhbHNlICYmIGJvYXJkW2ldLmJlZW5IaXQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2JvYXJkSWR9JHtpfWApO1xuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDEzMywgMjU1LCAxNzkpXCI7XG4gICAgICB9IGVsc2UgaWYgKGJvYXJkW2ldLnN0b3JlZFNoaXAgPT09IGZhbHNlICYmIGJvYXJkW2ldLmJlZW5IaXQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2JvYXJkSWR9JHtpfWApO1xuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDI1NSwgMTMzLCAxMzMpXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Ym9hcmRJZH0ke2l9YCk7XG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlQm9hcmQ7XG4iLCJjb25zdCBjcmVhdGVTaGlwID0gKGxlbmd0aCwgaXNWZXJ0aWNhbCkgPT4ge1xuICBjb25zdCBoaXRDb3VudCA9IDA7XG4gIGNvbnN0IHN1bmsgPSBmYWxzZTtcblxuICBjb25zdCBoaXQgPSAoaW5kZXgsIGJvYXJkKSA9PiB7XG4gICAgY29uc3QgaGl0U2hpcCA9IGJvYXJkW2luZGV4XS5zdG9yZWRTaGlwO1xuXG4gICAgaWYgKGhpdFNoaXAuaGl0Q291bnQgPCBoaXRTaGlwLmxlbmd0aCkge1xuICAgICAgICBoaXRTaGlwLmhpdENvdW50ICs9IDE7XG4gICAgICAgIGlmIChoaXRTaGlwLmhpdENvdW50ID09PSBoaXRTaGlwLmxlbmd0aCkge1xuICAgICAgICAgICAgaGl0U2hpcC5zdW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoaXRDb3VudDtcbiAgfTtcblxuICByZXR1cm4geyBsZW5ndGgsIGhpdENvdW50LCBzdW5rLCBoaXQsIGlzVmVydGljYWx9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2hpcDsiLCJpbXBvcnQgY3JlYXRlU2hpcCBmcm9tIFwiLi9jcmVhdGVTaGlwXCI7XG5cbmNvbnN0IGNyZWF0ZVJhbmRvbVNoaXBzID0gKGJvYXJkLCBzaGlwTGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgYXhpc0RlY2lkZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSArIDE7XG4gICAgY29uc3QgYm9hcmRDb3B5ID0gWy4uLmJvYXJkXTtcblxuICAgIGlmKGF4aXNEZWNpZGVyID09PSAxKSB7XG4gICAgICAgIGxldCBzdGFydGluZ0NvbHVtbjtcbiAgICAgICAgbGV0IHN0YXJ0aW5nUm93O1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHN0YXJ0aW5nQ29sdW1uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKCgxMCAtIHNoaXBMZW5ndGgpICsgMSkpO1xuICAgICAgICAgICAgc3RhcnRpbmdSb3cgPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApKSAqIDEwO1xuICAgICAgICB9IHdoaWxlIChcbiAgICAgICAgICAgIGJvYXJkQ29weS5zbGljZShzdGFydGluZ1JvdyArIHN0YXJ0aW5nQ29sdW1uLCBzdGFydGluZ1JvdyArIHN0YXJ0aW5nQ29sdW1uICsgc2hpcExlbmd0aClcbiAgICAgICAgICAgIC5zb21lKGNlbGwgPT4gY2VsbC5zdG9yZWRTaGlwKVxuICAgICAgICApXG5cbiAgICAgICAgY29uc3QgbmV3U2hpcCA9IGNyZWF0ZVNoaXAoc2hpcExlbmd0aCwgZmFsc2UpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBib2FyZENvcHlbc3RhcnRpbmdSb3cgKyBzdGFydGluZ0NvbHVtbiArIGldLnN0b3JlZFNoaXAgPSBuZXdTaGlwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHN0YXJ0aW5nQ29sdW1uO1xuICAgICAgICBsZXQgc3RhcnRpbmdSb3c7XG4gICAgICAgIGxldCBoYXNTdG9yZWRTaGlwXG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgc3RhcnRpbmdDb2x1bW4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgICAgICAgICBzdGFydGluZ1JvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgoMTAgLSBzaGlwTGVuZ3RoKSArIDEpKSAqIDEwO1xuICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNsaWNlZEFycmF5ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRpbmdSb3cgKyBzdGFydGluZ0NvbHVtbjsgaSA8IHN0YXJ0aW5nQ29sdW1uICsgc3RhcnRpbmdSb3cgKyAoc2hpcExlbmd0aCAqIDEwKTsgaSArPSAxMCkge1xuICAgICAgICAgICAgICAgIHNsaWNlZEFycmF5LnB1c2goYm9hcmRDb3B5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBoYXNTdG9yZWRTaGlwID0gc2xpY2VkQXJyYXkuc29tZShjZWxsID0+IGNlbGwuc3RvcmVkU2hpcCk7XG4gICAgICAgIH0gd2hpbGUgKGhhc1N0b3JlZFNoaXApO1xuXG4gICAgICAgIGNvbnN0IG5ld1NoaXAgPSBjcmVhdGVTaGlwKHNoaXBMZW5ndGgsIHRydWUpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aCAqIDEwOyBpICs9IDEwKSB7XG4gICAgICAgICAgICBib2FyZENvcHlbc3RhcnRpbmdSb3cgKyBzdGFydGluZ0NvbHVtbiArIGldLnN0b3JlZFNoaXAgPSBuZXdTaGlwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvYXJkQ29weTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmFuZG9tU2hpcHM7IiwiaW1wb3J0IGRpc3BsYXlCb2FyZCBmcm9tIFwiLi9kaXNwbGF5Qm9hcmRcIjtcbmltcG9ydCB1cGRhdGVCb2FyZCBmcm9tIFwiLi91cGRhdGVCb2FyZFwiO1xuaW1wb3J0IGNyZWF0ZVJhbmRvbVNoaXBzIGZyb20gXCIuL2NyZWF0ZVJhbmRvbVNoaXBzXCI7XG5cbmNvbnN0IGdhbWVCb2FyZCA9ICgpID0+IHtcbiAgbGV0IGJvYXJkID0gW107XG5cbiAgY29uc3QgY3JlYXRlQm9hcmQgPSAocGxheWVyKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgYm9hcmRbaV0gPSB7IHN0b3JlZFNoaXA6IGZhbHNlLCBiZWVuSGl0OiBmYWxzZSB9O1xuICAgICAgZGlzcGxheUJvYXJkKGksIHBsYXllcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBzdGFydCkgPT4ge1xuICAgIGlmIChzaGlwLmlzVmVydGljYWwpIHtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgc2hpcC5sZW5ndGggKiAxMDsgaSArPSAxMCkge1xuICAgICAgICBib2FyZFtpXS5zdG9yZWRTaGlwID0gc2hpcDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBzaGlwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGJvYXJkW2ldLnN0b3JlZFNoaXAgPSBzaGlwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCByYW5kb21TaGlwcyA9IChib2FyZElkLCBpc0FpQm9hcmQpID0+IHtcbiAgICBsZXQgYm9hcmRDb3B5ID0gWy4uLmJvYXJkXTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgYm9hcmRDb3B5W2ldLnN0b3JlZFNoaXAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBib2FyZENvcHkgPSBjcmVhdGVSYW5kb21TaGlwcyhib2FyZCwgNSk7XG4gICAgYm9hcmRDb3B5ID0gY3JlYXRlUmFuZG9tU2hpcHMoYm9hcmQsIDQpO1xuICAgIGJvYXJkQ29weSA9IGNyZWF0ZVJhbmRvbVNoaXBzKGJvYXJkLCAzKTtcbiAgICBib2FyZENvcHkgPSBjcmVhdGVSYW5kb21TaGlwcyhib2FyZCwgMyk7XG4gICAgYm9hcmRDb3B5ID0gY3JlYXRlUmFuZG9tU2hpcHMoYm9hcmQsIDIpO1xuXG4gICAgdXBkYXRlQm9hcmQoYm9hcmRDb3B5LCBib2FyZElkLCBpc0FpQm9hcmQpO1xuICAgIGJvYXJkID0gYm9hcmRDb3B5O1xuICB9XG5cbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb3JkaW5hdGVzLCBib2FyZElkLCBpc0FpQm9hcmQpID0+IHtcbiAgICBpZiAoYm9hcmRbY29yZGluYXRlc10uc3RvcmVkU2hpcCAhPT0gZmFsc2UpIHtcbiAgICAgIGJvYXJkW2NvcmRpbmF0ZXNdLmJlZW5IaXQgPSB0cnVlO1xuICAgICAgYm9hcmRbY29yZGluYXRlc10uc3RvcmVkU2hpcC5oaXQoY29yZGluYXRlcywgYm9hcmQpO1xuICAgICAgdXBkYXRlQm9hcmQoYm9hcmQsIGJvYXJkSWQsIGlzQWlCb2FyZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvYXJkW2NvcmRpbmF0ZXNdLmJlZW5IaXQgPSB0cnVlO1xuICAgICAgdXBkYXRlQm9hcmQoYm9hcmQsIGJvYXJkSWQsIGlzQWlCb2FyZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICBmb3IobGV0IGk9MDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICBpZihib2FyZFtpXS5zdG9yZWRTaGlwICE9PSBmYWxzZSAmJiBib2FyZFtpXS5iZWVuSGl0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjb25zdCByZXNldEJvYXJkID0gKCkgPT4ge1xuICAgIGZvcihsZXQgaT0wOyBpIDwgMTAwOyBpICs9IDEpIHtcbiAgICAgIGJvYXJkW2ldLnN0b3JlZFNoaXAgPSBmYWxzZTtcbiAgICAgIGJvYXJkW2ldLmJlZW5IaXQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBib2FyZCwgY3JlYXRlQm9hcmQsIHBsYWNlU2hpcCwgcmVjZWl2ZUF0dGFjaywgYWxsU2hpcHNTdW5rLCByYW5kb21TaGlwcywgcmVzZXRCb2FyZCB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2FtZUJvYXJkOyIsImNvbnN0IGNyZWF0ZVBsYXllciA9IChuYW1lLCBvcHBCb2FyZCkgPT4ge1xuXG4gICAgY29uc3QgYXR0YWNrID0gKGNvcmRpbmF0ZXMsIGJvYXJkSWQsIGlzQWlCb2FyZCkgPT4ge1xuICAgICAgICBvcHBCb2FyZC5yZWNlaXZlQXR0YWNrKGNvcmRpbmF0ZXMsIGJvYXJkSWQsIGlzQWlCb2FyZCk7XG4gICAgfVxuXG4gICAgY29uc3QgYWlBdHRhY2sgPSAoKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21OdW1iZXI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDk5KTtcbiAgICAgICAgfSB3aGlsZSAob3BwQm9hcmQuYm9hcmRbcmFuZG9tTnVtYmVyXS5iZWVuSGl0KTtcblxuICAgICAgICBvcHBCb2FyZC5yZWNlaXZlQXR0YWNrKHJhbmRvbU51bWJlciwgJ3AnLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbmFtZSwgb3BwQm9hcmQsIGF0dGFjaywgYWlBdHRhY2sgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQbGF5ZXI7IiwiaW1wb3J0IHVwZGF0ZUJvYXJkIGZyb20gXCIuL3VwZGF0ZUJvYXJkXCI7XG5cbmNvbnN0IGVuZEdhbWUgPSAocEJvYXJkLCBhaUJvYXJkLCBpc1BsYXllcldvbikgPT4ge1xuICAgIGlmKGlzUGxheWVyV29uKSB7XG4gICAgICAgIGNvbnN0IHdpbm5lclRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lubmVyVGV4dCcpO1xuICAgICAgICB3aW5uZXJUZXh0LnRleHRDb250ZW50ID0gJ1lvdSBXb24gRG8gWW91IFdhbnQgVG8gUGxheSBBZ2Fpbj8nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHdpbm5lclRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lubmVyVGV4dCcpO1xuICAgICAgICB3aW5uZXJUZXh0LnRleHRDb250ZW50ID0gJ0FpIFdvbiBEbyBZb3UgV2FudCBUbyBQbGF5IEFnYWluJztcbiAgICB9XG5cbiAgICBjb25zdCB3aW5CYWNrZ3JvdW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbkJhY2tncm91bmQnKTtcbiAgICB3aW5CYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG5cbiAgICBjb25zdCByZXN0YXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc3RhcnRCdXR0b24nKTtcbiAgICByZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBwQm9hcmQucmVzZXRCb2FyZCgpO1xuICAgICAgICB1cGRhdGVCb2FyZChwQm9hcmQuYm9hcmQsICdwJywgZmFsc2UpO1xuXG4gICAgICAgIGFpQm9hcmQucmVzZXRCb2FyZCgpO1xuICAgICAgICB1cGRhdGVCb2FyZChhaUJvYXJkLmJvYXJkLCAnYWknLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBidXR0b25zRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbnMnKTtcbiAgICAgICAgYnV0dG9uc0Rpdi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YXJ0QnV0dG9uJyk7XG4gICAgICAgIHN0YXJ0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG5cbiAgICAgICAgY29uc3QgbWFudWFsQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hbnVhbCcpO1xuICAgICAgICBtYW51YWxCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgbWFudWFsQnV0dG9uLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tbGVmdCcpO1xuXG4gICAgICAgIGNvbnN0IHBsYWNlUmFuZG9tQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmRvbScpO1xuICAgICAgICBwbGFjZVJhbmRvbUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICBwbGFjZVJhbmRvbUJ1dHRvbi5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWFyZ2luLWxlZnQnKTtcblxuICAgICAgICBjb25zdCBheGlzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF4aXNCdXR0b24nKTtcbiAgICAgICAgYXhpc0J1dHRvbi5yZW1vdmUoKTtcblxuICAgICAgICB3aW5CYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZW5kR2FtZTsiLCJjb25zdCBkaXNwbGF5TWFudWFsU2hpcHMgPSAoZXZlbnQsIHNoaXBMZW5ndGgsIHJldmVydCwgYm9hcmQpID0+IHtcbiAgICBjb25zdCBheGlzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF4aXNCdXR0b24nKTtcbiAgICBjb25zdCBjZWxsSWQgPSBOdW1iZXIoZXZlbnQudGFyZ2V0LmlkLnNsaWNlKDEpKTtcbiAgICBjb25zdCBjb2x1bW5JbmRleCA9IGNlbGxJZCAlIDEwO1xuICAgIGNvbnN0IHJvd0luZGV4ID0gTWF0aC5mbG9vcihjZWxsSWQgLyAxMCk7XG5cbiAgICBpZihyZXZlcnQpIHtcblxuICAgICAgICBpZihheGlzQnV0dG9uLnRleHRDb250ZW50ID09PSAnSG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHVudmFsaWRDZWxscyA9IGNvbHVtbkluZGV4IC0gc2hpcExlbmd0aDtcbiAgICAgICAgICAgIGlmKHVudmFsaWRDZWxscyA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aCAtIHVudmFsaWRDZWxsczsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxSZXZlcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcCR7Y2VsbElkICsgaX1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYm9hcmRbY2VsbElkICsgaV0uc3RvcmVkU2hpcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSZXZlcnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsUmV2ZXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Ake2NlbGxJZCArIGl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGJvYXJkW2NlbGxJZCArIGldLnN0b3JlZFNoaXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmV2ZXJ0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZihheGlzQnV0dG9uLnRleHRDb250ZW50ID09PSAnVmVydGljYWwnKSB7XG4gICAgICAgICAgICBjb25zdCB1bnZhbGlkQ2VsbHMgPSByb3dJbmRleCAtIHNoaXBMZW5ndGg7XG4gICAgICAgICAgICBpZih1bnZhbGlkQ2VsbHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IChzaGlwTGVuZ3RoICogMTApIC0gKHVudmFsaWRDZWxscyAqIDEwKTsgaSArPSAxMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsUmV2ZXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Ake2NlbGxJZCArIGl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGJvYXJkW2NlbGxJZCArIGldLnN0b3JlZFNoaXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmV2ZXJ0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAoc2hpcExlbmd0aCAqIDEwKTsgaSArPSAxMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsUmV2ZXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Ake2NlbGxJZCArIGl9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGJvYXJkW2NlbGxJZCArIGldLnN0b3JlZFNoaXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmV2ZXJ0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICB9IGVsc2UgaWYoYXhpc0J1dHRvbi50ZXh0Q29udGVudCA9PT0gJ0hvcml6b250YWwnKSB7XG5cbiAgICAgICAgY29uc3QgdW52YWxpZENlbGxzID0gKDkgLSBjb2x1bW5JbmRleCkgKyAxO1xuICAgICAgICBpZihjb2x1bW5JbmRleCA+ICg5IC0gc2hpcExlbmd0aCkgKyAxKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdW52YWxpZENlbGxzOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Ake2NlbGxJZCArIGl9YCk7XG4gICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYigxODUsIDc0LCA3NCknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcCR7Y2VsbElkICsgaX1gKTtcbiAgICAgICAgICAgICAgICBpZihib2FyZFtjZWxsSWQgKyBpXS5zdG9yZWRTaGlwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmQgPSAnbGltZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYoYXhpc0J1dHRvbi50ZXh0Q29udGVudCA9PT0gJ1ZlcnRpY2FsJyl7XG5cbiAgICAgICAgY29uc3QgdW52YWxpZENlbGxzID0gKDkgLSByb3dJbmRleCkgKyAxO1xuICAgICAgICBpZihyb3dJbmRleCA+ICg5IC0gc2hpcExlbmd0aCkgKyAxKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdW52YWxpZENlbGxzICogMTA7IGkgKz0gMTApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Ake2NlbGxJZCArIGl9YCk7XG4gICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYigxODUsIDc0LCA3NCknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGggKiAxMDsgaSArPSAxMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcCR7Y2VsbElkICsgaX1gKTtcbiAgICAgICAgICAgICAgICBpZihib2FyZFtjZWxsSWQgKyBpXS5zdG9yZWRTaGlwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmQgPSAnbGltZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5TWFudWFsU2hpcHM7IiwiaW1wb3J0IGdhbWVCb2FyZCBmcm9tIFwiLi9nYW1lQm9hcmRcIjtcbmltcG9ydCBjcmVhdGVQbGF5ZXIgZnJvbSBcIi4vY3JlYXRlUGxheWVyXCI7XG5pbXBvcnQgZW5kR2FtZSBmcm9tIFwiLi9lbmRHYW1lXCI7XG5pbXBvcnQgYWRkQXhpc0J1dHRvbiBmcm9tIFwiLi9hZGRBeGlzQnV0dG9uXCI7XG5pbXBvcnQgZGlzcGxheU1hbnVhbFNoaXBzIGZyb20gXCIuL2Rpc3BsYXlNYW51YWxTaGlwc1wiO1xuaW1wb3J0IGNyZWF0ZVNoaXAgZnJvbSBcIi4vY3JlYXRlU2hpcFwiO1xuaW1wb3J0IHVwZGF0ZUJvYXJkIGZyb20gXCIuL3VwZGF0ZUJvYXJkXCI7XG5cblxuY29uc3QgcEJvYXJkID0gZ2FtZUJvYXJkKCk7XG5wQm9hcmQuY3JlYXRlQm9hcmQoJ3AnKTtcbmNvbnN0IGFpQm9hcmQgPSBnYW1lQm9hcmQoKTtcbmFpQm9hcmQuY3JlYXRlQm9hcmQoJ2FpJyk7XG5cbmNvbnN0IHBsYXllciA9IGNyZWF0ZVBsYXllcigncGxheWVyJywgYWlCb2FyZCk7XG5jb25zdCBhaSA9IGNyZWF0ZVBsYXllcignYWknLCBwQm9hcmQpO1xuXG5jb25zdCBwbGFjZVJhbmRvbUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yYW5kb20nKTtcbmNvbnN0IHBsYWNlTWFudWFsbHlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFudWFsJyk7XG5cbnBsYWNlUmFuZG9tQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHBsYWNlTWFudWFsbHlCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIHBsYWNlUmFuZG9tQnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAnMTE1cHgnO1xuXG4gICAgcEJvYXJkLnJhbmRvbVNoaXBzKCdwJywgZmFsc2UpO1xufSlcblxuY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IE51bWJlcihldmVudC50YXJnZXQuaWQuc2xpY2UoMikpXG4gICAgXG4gICAgcGxheWVyLmF0dGFjayhpbmRleCwgJ2FpJywgdHJ1ZSk7XG4gICAgY29uc3QgaXNQbGF5ZXJXb24gPSBhaUJvYXJkLmFsbFNoaXBzU3VuaygpO1xuICAgIGlmKGlzUGxheWVyV29uKSB7XG4gICAgICAgIGVuZEdhbWUocEJvYXJkLCBhaUJvYXJkLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBhbGxDZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpdi5jZWxsW2lkXj1cImFpXCJdJyk7XG4gICAgICAgIGFsbENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWkuYWlBdHRhY2soKTtcbiAgICBjb25zdCBpc0FpV29uID0gcEJvYXJkLmFsbFNoaXBzU3VuaygpO1xuICAgIGlmKGlzQWlXb24pIHtcbiAgICAgICAgZW5kR2FtZShwQm9hcmQsIGFpQm9hcmQsIGZhbHNlKTtcblxuICAgICAgICBjb25zdCBhbGxDZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpdi5jZWxsW2lkXj1cImFpXCJdJyk7XG4gICAgICAgIGFsbENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5jb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFydEJ1dHRvbicpO1xuc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgbGV0IHNoaXBDZWxscyA9IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICAgIGlmKHBCb2FyZC5ib2FyZFtpXS5zdG9yZWRTaGlwICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgc2hpcENlbGxzICs9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZihzaGlwQ2VsbHMgPT09IDE3KSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnNEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnV0dG9ucycpO1xuICAgICAgICBidXR0b25zRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHN0YXJ0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cblxuICAgICAgICBhaUJvYXJkLnJhbmRvbVNoaXBzKCdhaScsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IGFsbENlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2LmNlbGxbaWRePVwiYWlcIl0nKTtcbiAgICAgICAgYWxsQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKTtcbiAgICAgICAgfSlcbiAgICB9XG59KVxuXG5wbGFjZU1hbnVhbGx5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHBsYWNlUmFuZG9tQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICBjb25zdCBheGlzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF4aXNCdXR0b24nKTtcbiAgICBpZihheGlzQnV0dG9uID09PSBudWxsKSB7XG4gICAgICAgIGFkZEF4aXNCdXR0b24oKTtcblxuICAgICAgICBjb25zdCBhbGxQbGF5ZXJDZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpdi5jZWxsW2lkXj1cInBcIl0nKTtcbiAgICAgICAgYWxsUGxheWVyQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNoaXBDZWxscyA9IDA7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBCb2FyZC5ib2FyZFtpXS5zdG9yZWRTaGlwICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcENlbGxzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihzaGlwQ2VsbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1hbnVhbFNoaXBzKGV2ZW50LCA1LCBmYWxzZSwgcEJvYXJkLmJvYXJkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoc2hpcENlbGxzID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNYW51YWxTaGlwcyhldmVudCwgNCwgZmFsc2UsIHBCb2FyZC5ib2FyZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNoaXBDZWxscyA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TWFudWFsU2hpcHMoZXZlbnQsIDMsIGZhbHNlLCBwQm9hcmQuYm9hcmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihzaGlwQ2VsbHMgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNYW51YWxTaGlwcyhldmVudCwgMywgZmFsc2UsIHBCb2FyZC5ib2FyZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNoaXBDZWxscyA9PT0gMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1hbnVhbFNoaXBzKGV2ZW50LCAyLCBmYWxzZSwgcEJvYXJkLmJvYXJkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIGFsbFBsYXllckNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlNYW51YWxTaGlwcyhldmVudCwgNSwgdHJ1ZSwgcEJvYXJkLmJvYXJkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgYWxsUGxheWVyQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBuZXdTaGlwO1xuICAgICAgICAgICAgICAgIGxldCBpc1ZlcnRpY2FsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkZGVkQXhpc0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5heGlzQnV0dG9uJyk7XG5cbiAgICAgICAgICAgICAgICBpZihhZGRlZEF4aXNCdXR0b24udGV4dENvbnRlbnQgPT09ICdWZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNWZXJ0aWNhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBzaGlwQ2VsbHMgPSAwO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZihwQm9hcmQuYm9hcmRbaV0uc3RvcmVkU2hpcCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXBDZWxscyArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoc2hpcENlbGxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NoaXAgPSBjcmVhdGVTaGlwKDUsIGlzVmVydGljYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihzaGlwQ2VsbHMgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2hpcCA9IGNyZWF0ZVNoaXAoNCwgaXNWZXJ0aWNhbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNoaXBDZWxscyA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCgzLCBpc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoc2hpcENlbGxzID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCgzLCBpc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoc2hpcENlbGxzID09PSAxNSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCgyLCBpc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsSWQgPSBOdW1iZXIoZXZlbnQudGFyZ2V0LmlkLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGlja2VkQ2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNwJHtjZWxsSWR9YCk7XG4gICAgICAgICAgICAgICAgaWYoY2xpY2tlZENlbGwuc3R5bGUuYmFja2dyb3VuZCAhPT0gJ3JnYigxODUsIDc0LCA3NCknKSB7XG4gICAgICAgICAgICAgICAgICAgIHBCb2FyZC5wbGFjZVNoaXAobmV3U2hpcCwgY2VsbElkKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQm9hcmQocEJvYXJkLmJvYXJkLCAncCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbn0pXG4iLCJjb25zdCBhZGRBeGlzQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdheGlzQnV0dG9uJyk7XG4gICAgYnV0dG9uLnRleHRDb250ZW50ID0gJ0hvcml6b250YWwnO1xuXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZihidXR0b24udGV4dENvbnRlbnQgPT09ICdWZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdIb3Jpem9udGFsJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdWZXJ0aWNhbCc7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgYnV0dG9uc0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b25zJyk7XG4gICAgYnV0dG9uc0Rpdi5hcHBlbmRDaGlsZChidXR0b24pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRBeGlzQnV0dG9uOyJdLCJuYW1lcyI6WyJpZCIsInBsYXllciIsImNlbGwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJxdWVyeVNlbGVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJib2FyZCIsImJvYXJkSWQiLCJpc0FpQm9hcmQiLCJpIiwic3RvcmVkU2hpcCIsImJlZW5IaXQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwibGVuZ3RoIiwiaXNWZXJ0aWNhbCIsImhpdENvdW50Iiwic3VuayIsImhpdCIsImluZGV4IiwiaGl0U2hpcCIsInNoaXBMZW5ndGgiLCJib2FyZENvcHkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzdGFydGluZ0NvbHVtbiIsInN0YXJ0aW5nUm93Iiwic2xpY2UiLCJzb21lIiwibmV3U2hpcCIsImhhc1N0b3JlZFNoaXAiLCJzbGljZWRBcnJheSIsInB1c2giLCJjcmVhdGVCb2FyZCIsInBsYWNlU2hpcCIsInNoaXAiLCJzdGFydCIsInJlY2VpdmVBdHRhY2siLCJjb3JkaW5hdGVzIiwiYWxsU2hpcHNTdW5rIiwicmFuZG9tU2hpcHMiLCJyZXNldEJvYXJkIiwibmFtZSIsIm9wcEJvYXJkIiwiYXR0YWNrIiwiYWlBdHRhY2siLCJyYW5kb21OdW1iZXIiLCJwQm9hcmQiLCJhaUJvYXJkIiwiaXNQbGF5ZXJXb24iLCJ0ZXh0Q29udGVudCIsIndpbkJhY2tncm91bmQiLCJkaXNwbGF5IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1hbnVhbEJ1dHRvbiIsInJlbW92ZVByb3BlcnR5IiwicGxhY2VSYW5kb21CdXR0b24iLCJyZW1vdmUiLCJldmVudCIsInJldmVydCIsImF4aXNCdXR0b24iLCJjZWxsSWQiLCJOdW1iZXIiLCJ0YXJnZXQiLCJjb2x1bW5JbmRleCIsInJvd0luZGV4IiwidW52YWxpZENlbGxzIiwiY2VsbFJldmVydCIsImJhY2tncm91bmQiLCJhaSIsInBsYWNlTWFudWFsbHlCdXR0b24iLCJtYXJnaW5MZWZ0IiwiaGFuZGxlQ2xpY2siLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGFydEJ1dHRvbiIsInNoaXBDZWxscyIsImJ1dHRvbiIsImFsbFBsYXllckNlbGxzIl0sInNvdXJjZVJvb3QiOiIifQ==